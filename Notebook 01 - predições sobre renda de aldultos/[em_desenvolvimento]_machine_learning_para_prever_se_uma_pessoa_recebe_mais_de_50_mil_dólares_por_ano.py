# -*- coding: utf-8 -*-
"""[EM DESENVOLVIMENTO] Machine Learning para prever se uma pessoa recebe mais de 50 mil dólares por ano

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190JYkX-QpEemcBk1Twz4PfNZlbABDrma

## **Dataset**:
O conjunto de dados para este projeto é originário do Repositório de A prendizado de Máquina da UCI (https://archive.ics.uci.edu/ml/datasets/Adult)

# **Importando os módulos**
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.pipeline import Pipeline
from sklearn.model_selection import RandomizedSearchCV
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from warnings import simplefilter
import pickle
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np

style.use('ggplot')
simplefilter(action='ignore', category=FutureWarning)
# %matplotlib inline

"""# **Carregando e visualizando os Dados**"""

df = pd.DataFrame()
csv = pd.read_csv('adult.data', na_values= '?')
df = pd.concat([df,csv])

df.head()

"""# **Descrição dos dados por cabeçalho**

* **age**: Idade

* **workclass**: Classe trabalhadora (Funcionário público, autônomo, empresário...)

* **education**: Escolaridade

* **education-num**: Código do Nível de Escolaridade

* **marital-status**: Estado Civil

* **occupation**: Ocupação

* **relationship**: Relacionamento 

* **race**: Raça

* **sex**: Sexo

* **capital**-gain: Ganho de Capital

* **capital-loss**: Perda de Capital

* **hours-per-week**: Horas de trabalho semanais

* **native-country**: País Nativo

# **Informação sobre as colunas**
"""

df.info()

#Variáveis numéricas
df.describe()

# Variáveis categóricas
df.describe(include=['O'])

"""# **Análise exploratória**"""

#Distribuição das idades
sns.catplot(x='age',kind='violin',data=df, color= '#34ebbd')

#Distribuição dos salários
sns.catplot(data=df, x='income',kind='count', palette='crest')
df['income'].value_counts()

#Quantidade de pessoas por nível de escolaridade
df['education'].value_counts()

# Distribuição de renda por nível de escolaridade
plt.figure(figsize=(20.5,10))
sns.countplot(data=df, x = 'education',  hue = 'income', palette= 'crest')
plt.xticks(rotation='horizontal')
plt.legend(bbox_to_anchor=(1, 1), loc=1)

# Para uma melhor visualização, agrupei as horas trabalhadas em 3 categorias:
# 0-30 (jornada curta)
# 30-40 (jornada normal)
# 40-100 (jornada longa)

# Criando novo data frame para armazenar as jornadas divididas em grupos
df_jornadas = pd.DataFrame() 
df_jornadas = pd.concat([df,df_jornadas])
df_jornadas['hours-per-week'] = pd.cut(df_jornadas['hours-per-week'],[0,30,40,100], labels =['short','normal','extra'])

# Distribuição das classes por Horas trabalhadas
plt.figure(figsize=(8,6))
sns.countplot(data=df_jornadas, x = 'hours-per-week',  hue = 'income', palette='crest')
plt.xticks(rotation='horizontal')

# Distribuiçao de renda de acordo com a ocupação

plt.figure(figsize=(25,10))
sns.countplot(data=df, x = 'occupation', hue = 'income', palette= 'crest')
plt.xticks(rotation='horizontal')

#Quantidade de pessoas por nível de ocupação
df['occupation'].value_counts()

"""### Relação de **idade** (coluna age) com a coluna **income** (salário anual)

"""

# Para uma melhor visualização, agrupei as idades em 3 categorias:
# 0-25 (jovens)
# 25-50 (adultos)
# 50-100 (idosos)

# Criando novo data frame para armazenar as idades divididas em grupos
df_idades = pd.DataFrame()
df_idades = pd.concat([df_idades,df])
# Dividindo as idades em grupos
df_idades['age'] = pd.cut(df_idades['age'], [0,25,50,100], labels= ['jovens', 'adultos', 'idosos'])

#Plotando o gráfico
plt.figure(figsize=(8,6))
sns.countplot(data=df_idades, x = 'age', hue = 'income', palette= 'crest')

"""### Relação de **sexo** (coluna sex) com a coluna **income** (salário anual)

"""

plt.figure(figsize=(8,6))
sns.countplot(data=df, x = 'sex', hue = 'income', palette= 'crest')

"""### Relação de **raça** (coluna race) com a coluna **income** (salário anual)

"""

plt.figure(figsize=(10,6))
sns.countplot(data=df, y = 'race', hue = 'income', palette= 'crest')

"""# **Análise de dados**





"""

